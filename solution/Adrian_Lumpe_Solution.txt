= Solution Bonus Exercise

== Group Information

Adrian, Lumpe, 2734248
Konstantinos, Papa, 2954633

== Solution 1.1

Contract address: 0x0177C87d72af6119A9fB52984aa406aA68C792D0

== Solution 1.2

This type of hash-locking is very vulnerable to brute force attacks. An attacker could calculate the hashes for common uints (1 to 1000000 for example) and compare them to those hashes in the contracts storage under which some ETH is deposited. He then just needs to call the claim() function with the corresponding uint and can steal the deposited ETH.

== Solution 2.1

The wallet from file contracts/Wallet.sol is vulnerable to a re-entrancy attack. In the withdraw() function the current balance is sent to the sender (line 33) before setting the balance to 0 (line 35). This enables a malicious sender to recursively call the withdraw() function from within the fallback() function of the sending contract to withdraw more than originally deposited. In our implementation we withdraw 5 times the amount we deposited using an internal counter to limit the recursion.

== Solution 2.2

Attacker address: 0xe26bF26076A69b4de0483c2b79d3Dcb56402C2b1
